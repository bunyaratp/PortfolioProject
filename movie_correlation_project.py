# -*- coding: utf-8 -*-
"""Movie Correlation Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTSiyrVLaxPMJeHFF6y3WfNhgCj8rKxh
"""

# Commented out IPython magic to ensure Python compatibility.
# First let's import the packages we will use in this project
# You can do this all now or as you need them
import pandas as pd
import numpy as np
import seaborn as sns


import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import matplotlib
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8)

pd.options.mode.chained_assignment = None

from google.colab import files
uploaded = files.upload()

# Now we need to read in the data
import io
df = pd.read_csv(io.BytesIO(uploaded['movies (2).csv']))

# Now let's take a look at the data
df

# We need to see if we have any missing data
# Let's loop through the data and see if there is anything missing

for col in df.columns:
    pct_missing = np.mean(df[col].isnull())
    print('{} - {}%'.format(col, round(pct_missing*100)))

#Data types for our columns
df.dtypes

df['budget'] = df['budget'].fillna(0)
df['gross'] = df['gross'].fillna(0)

df

#change data type of column
df['budget'] = df['budget'].astype('int64')
df['gross'] = df['gross'].astype('int64')

df

#Create correct Year column
df['yearcorrect'] = df['released'].astype(str).str.extract(r'(\d{4})')
df

df.sort_values(by=['gross'], inplace=False, ascending=False)

pd.set_option('display.max_rows',None)

#Drop any duplicates
df['company'] = df['company'].drop_duplicates().sort_values(ascending=False)

df

#Budget high correlation
#company high correlation

#Scatter plot with budget vs groo=ss
plt.scatter(x=df['budget'], y=df['gross'])
plt.title('Budget vs Gross Earnings')
plt.xlabel('Gross Earnings')
plt.ylabel('Budget for Film')
plt.show()

df.head()

# Plot budget vs gross using seaborn
sns.regplot(x='budget', y='gross', data=df, scatter_kws={'color':'red'}, line_kws={'color':'blue'})

#Let's start looking at correlation

# Select only numerical features for correlation analysis.
numerical_df = df.select_dtypes(include=np.number)

# Calculate the correlation matrix.
correlation_matrix = numerical_df.corr() #

# Display the correlation matrix.
print(correlation_matrix)

# Select only numerical features for correlation analysis.
numerical_df = df.select_dtypes(include=np.number)

# Calculate the correlation matrix.
correlation_matrix = numerical_df.corr(method ='pearson')

# Display the correlation matrix.
print(correlation_matrix)

# Select only numerical features for correlation analysis.
numerical_df = df.select_dtypes(include=np.number)

# Calculate the correlation matrix.
correlation_matrix = numerical_df.corr(method ='kendall')

# Display the correlation matrix.
print(correlation_matrix)

# Select only numerical features for correlation analysis.
numerical_df = df.select_dtypes(include=np.number)

# Calculate the correlation matrix.
correlation_matrix = numerical_df.corr(method ='spearman')

# Display the correlation matrix.
print(correlation_matrix)

#High correlation between budget and gross
#I was right

numerical_df = df.select_dtypes(include=np.number)
correlation_matrix = numerical_df.corr(method='pearson')
sns.heatmap(correlation_matrix,annot=True)
plt.title('Correlation Matrix for Numeric Features')
plt.xlabel('Movies Features')
plt.ylabel('MOvies Featuers')
plt.show()

#Look at company
df.head()

df_numerized = df
for col_name in df_numerized.columns:
  if(df_numerized[col_name].dtype == 'object'):
    df_numerized[col_name]= df_numerized[col_name].astype('category')
    df_numerized[col_name]=df_numerized[col_name].cat.codes
df_numerized

numerical_df = df.select_dtypes(include=np.number)
correlation_matrix = df_numerized.corr(method='pearson')
sns.heatmap(correlation_matrix,annot=True)
plt.title('Correlation Matrix for Numeric Features')
plt.xlabel('Movies Features')
plt.ylabel('MOvies Featuers')
plt.show()

df_numerized.corr()

correlation_mat = df_numerized.corr()
corr_pairs = correlation_mat.unstack()
corr_pairs

sorted_pairs = corr_pairs.sort_values()
sorted_pairs

high_corr = sorted_pairs[(sorted_pairs)>0.5]
high_corr

#Vote and budget have the highest correlation to gross earning

#Company has low correlation
#I was wrong